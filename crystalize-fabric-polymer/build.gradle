plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'java-library'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	maven { url "https://api.modrinth.com/maven" }
	maven { url 'https://maven.nucleoid.xyz' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Crystalize API and tooling
	implementation include(project(':crystalize-base'))
	implementation include(project(':crystalize-blockbench'))
	implementation include(project(':crystalize-minecraft-model'))

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation include("maven.modrinth:nylon:${project.nylon_version}")
	modImplementation include("eu.pb4:polymer-core:${project.polymer_version}")
	modImplementation include("eu.pb4:polymer-networking:${project.polymer_version}")
	modImplementation include("eu.pb4:polymer-resource-pack:${project.polymer_version}")
	modImplementation include("eu.pb4:polymer-virtual-entity:${project.polymer_version}")

	modRuntimeOnly "eu.pb4:polymer-autohost:${project.polymer_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}
